name: $(Build.DefinitionName)_${{ replace(replace(variables['Build.SourceBranch'],'refs/heads/',''),'/','_') }}_$(Date:yyyyMMdd)$(Rev:.r)
trigger: none
pr:
  branches:
    include:
      - main

parameters:
- name: TEST_ENV
  displayName: TEST_ENV
  type: string
  default: NStaging
  values:
    - NStaging
    - PROD
- name: TEST_USER
  displayName: TEST_USER
  type: string
  default: rajat.sharma+publicbundle@cldcvr.com
- name: TEST_PASSWORD
  displayName: TEST_PASSWORD
  type: string
  default: password@123
- name: TEST_REGEX
  displayName: TEST_REGEX
  type: string
  default: Test
- name: TEST_COMMAND
  displayName: TEST_COMMAND
  type: string
  default: test-docker-public-bundle
  values:
    - test-docker-public-bundle
- name: goVersion
  displayName: GO_VERSION
  type: string
  default: '1.16.4'

pool:
    vmImage: "ubuntu-latest"

stages:
  - stage: Test
    displayName: Run Public Bundle Tests
    variables:
      - group: Api-Automation-Docker-Env
      - group: Common-Dev
    jobs:
    - job: Run_Tests
      displayName: Run Public Bundle Tests
      timeoutInMinutes: 600
      steps:
        - checkout: self
          persistCredentials: true
        - task: GoTool@0
          displayName: "Go Tool Install"
          inputs:
            version: '${{ parameters.goVersion }}'
        - task: DockerInstaller@0
          displayName: "Docker Install"
          inputs:
            dockerVersion: '19.03.12'
        - task: replacetokens@3
          displayName: "Token Replace .env.tests"
          inputs:
            targetFiles: '.env.tests'
            encoding: 'auto'
            writeBOM: true
            actionOnMissing: 'warn'
            keepToken: false
            tokenPrefix: '#{'
            tokenSuffix: '}#'
            useLegacyPattern: false
            enableTransforms: false
            enableTelemetry: true
        - task: Docker@2
          displayName: Docker Login
          inputs:
            containerRegistry: 'Docker-Hub'
            command: 'login'
        - script: |
            mkdir /home/vsts/api
          displayName: "Create mount directories"
        - task: mattlabrum.build-task.custom-build-task.downloadsSecureFile@0
          displayName: 'Download Secure File Cloud Cred'
          inputs:
            fileInput: 'vanguard-staging-b1c22baf575c.json'
            targetPath: '/home/vsts/api/'
            targetName: 'application_default_credentials.json'
        - bash:  echo "##vso[task.setvariable variable=shellopts]errexit"
          displayName: "Force exit on error (bash)"
        - script: |
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            cat .env.tests
            go env -w GO111MODULE=on
            go env -w GOPRIVATE=github.com/ollionorg/*
            git config --global url."https://$GIT_TOKEN@github.com/ollionorg".insteadOf "https://github.com/ollionorg"
            set -o pipefail; TEST_VERSION=$(TEST_VERSION_STAGING) TEST_REGEX=${{ parameters.TEST_REGEX }} TEST_ENV=${{ parameters.TEST_ENV }} TEST_USER=${{ parameters.TEST_USER }} TEST_PASSWORD=${{ parameters.TEST_PASSWORD }} TEST_AZURE_BUILD_BRANCH=$(Build.SourceBranch) TEST_AZURE_BUILD_URL='$(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&_a=summary' make ${{ parameters.TEST_COMMAND }}
          env:
            PM_GIT_TOKEN: $(PM_GIT_TOKEN)
            GIT_TOKEN: $(GIT_TOKEN)
          displayName: Run Public Bundle Tests On ${{ parameters.TEST_ENV }}
        - task: PublishBuildArtifacts@1
          condition: always()
          inputs:
            PathtoPublish: "$(Build.SourcesDirectory)/report"
            ArtifactName: "reports"
            publishLocation: "Container"
  - stage: Cleanup_Codepipes
    condition: always()
    variables:
      - group: Api-Automation-Docker-Env
      - group: Common-Dev
    jobs:
      - job: Cleanup_codepipes
        timeoutInMinutes: 600
        displayName: Cleanup codepipes
        steps:
            - task: GoTool@0
              displayName: "Go Tool Install"
              inputs:
                version: '${{ parameters.goVersion }}'
            - task: DockerInstaller@0
              displayName: "Docker Install"
              inputs:
                dockerVersion: '19.03.12'
            - task: replacetokens@3
              displayName: "Token Replace .env.tests"
              inputs:
                targetFiles: '.env.tests'
                encoding: 'auto'
                writeBOM: true
                actionOnMissing: 'warn'
                keepToken: false
                tokenPrefix: '#{'
                tokenSuffix: '}#'
                useLegacyPattern: false
                enableTransforms: false
                enableTelemetry: true
            - task: Docker@2
              displayName: Docker Login
              inputs:
                containerRegistry: 'Docker-Hub'
                command: 'login'
            - script: |
                mkdir /home/vsts/api
              displayName: "Create mount directories"
            - task: mattlabrum.build-task.custom-build-task.downloadsSecureFile@0
              displayName: 'Download Secure File Cloud Cred'
              inputs:
                fileInput: 'vanguard-staging-b1c22baf575c.json'
                targetPath: '/home/vsts/api/'
                targetName: 'application_default_credentials.json'
            - bash:  echo "##vso[task.setvariable variable=shellopts]errexit"
              displayName: "Force exit on error (bash)"
            - script: |
                sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
                cat .env.tests
                go env -w GO111MODULE=on
                go env -w GOPRIVATE=github.com/ollionorg/*
                git config --global url."https://$GIT_TOKEN@github.com/ollionorg".insteadOf "https://github.com/ollionorg"
                TEST_VERSION=$(TEST_VERSION_STAGING) TEST_ENV=${{ parameters.TEST_ENV }} TEST_USER=${{ parameters.TEST_USER }} TEST_PASSWORD=${{ parameters.TEST_PASSWORD }} TEST_CLEANUP_ALL=false make test-docker-cleanup
              env:
                PM_GIT_TOKEN: $(PM_GIT_TOKEN)
                GIT_TOKEN: $(GIT_TOKEN)
              displayName: Run Cleanup On ${{ parameters.TEST_ENV }}